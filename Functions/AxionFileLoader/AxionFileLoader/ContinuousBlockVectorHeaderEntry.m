%{
    Copyright (c) 2024 Axion BioSystems, Inc.
    Contact: support@axion-biosystems.com
    All Rights Reserved
%}
classdef ContinuousBlockVectorHeaderEntry < CombinedBlockVectorHeaderEntry
    %CONTINUOUSBLOCKVECTORHEADERENTRY Summary of this class goes here
    %   Detailed explanation goes here

    properties(GetAccess = public, SetAccess = private)
        ChannelIDs
        DataSetNames
        ContinuousBlockVectorHeaderEntrySize % Size of CombinedBlockVectorHeaderEntry + itself
    end

    methods
        function this = ContinuousBlockVectorHeaderEntry( ...
                aEntryRecord, ...
                aFileID, ...
                aVersionMajor, ...
                aVersionMinor, ...
                aDataType, ...
                aSampleType, ...
                aSamplingFrequency, ...
                aVoltageScale, ...
                aNumChannelsPerBlock, ...
                aNumDataSetsPerBlock, ...
                aNumSamplesPerBlock, ...
                aVectorHeaderSize, ...
                aBlockHeaderSize, ...
                aBlockVectorStartTime, ...
                aExperimentStartTime, ...
                aAddedDate, ...
                aModifiedDate, ...
                aDuration, ...
                aName, ...
                aDescription, ...
                aDataRegionStart, ...
                aDataRegionLength, ...
                aCombinedBlockVectorSize, ...
                aChannelIDs, ...
                aDataSetNames, ...
                aSize)

            this@CombinedBlockVectorHeaderEntry( ...
                aEntryRecord, ...
                aFileID, ...
                aVersionMajor, ...
                aVersionMinor, ...
                aDataType, ...
                aSampleType, ...
                aSamplingFrequency, ...
                aVoltageScale, ...
                aNumChannelsPerBlock, ...
                aNumDataSetsPerBlock, ...
                aNumSamplesPerBlock, ...
                aVectorHeaderSize, ...
                aBlockHeaderSize, ...
                aBlockVectorStartTime, ...
                aExperimentStartTime, ...
                aAddedDate, ...
                aModifiedDate, ...
                aDuration, ...
                aName, ...
                aDescription, ...
                aDataRegionStart, ...
                aDataRegionLength, ...
                aCombinedBlockVectorSize);

            this.ChannelIDs = aChannelIDs;
            this.DataSetNames = aDataSetNames;
            this.ContinuousBlockVectorHeaderEntrySize = aSize + aCombinedBlockVectorSize;
        end
    end

    methods(Static)
        function obj = DeserializeFromCombinedBlockVectorHeaderEntry(aEntryRecord, aCombinedBlockVector, aFileID)
            % check if aCombinedBlockVector is a
            % CombinedBlockVectorHeaderEntry
            if ~isa(aCombinedBlockVector, 'CombinedBlockVectorHeaderEntry')
                error('aCombinedBlockVector is not CombinedBlockVectorHeaderEntry instance');
            end

            fStartPos = ftell(aFileID);

            fChannelIDs = cell(1, aCombinedBlockVector.NumChannelsPerBlock);

            for i = 1:aCombinedBlockVector.NumChannelsPerBlock
                fChannelIDs{i} = ChannelID(fread(aFileID, 1, 'uint16=>uint16'));
            end

            fDataSetNames = cell(1, aCombinedBlockVector.NumDataSetsPerBlock);
            fDataSetNamesSizeSum = 0;

            for i = 1:aCombinedBlockVector.NumDataSetsPerBlock
                fDataSetNameLength = fread(aFileID, 1, 'int=>int');
                fDataSetNames{1, i} = fread(aFileID, fDataSetNameLength, '*char').';
                fDataSetNamesSizeSum = fDataSetNameLength + fDataSetNamesSizeSum;
            end

            % calculate and check CRC
            fDataSize = ftell(aFileID) - fStartPos;

            % Calculate and check CRC
            fseek(aFileID, fStartPos, 'bof');
            fCRCBytes = fread(aFileID, fDataSize, 'uint8');
            fCalcCRC = CRC32(AxisFile.CRC_POLYNOMIAL, AxisFile.CRC_SEED).Compute(fCRCBytes);
            fReadCRC = fread(aFileID, 1, 'uint32');

            if(fReadCRC ~= fCalcCRC)
                error('BlockVectorMetaData checksum was incorrect: %s', fFilename);
            end

            fSize = ...
                length(fChannelIDs) * 2 + fDataSetNamesSizeSum + ...
                length(fDataSetNames) * 4 + 4;

            % actual read size
            fReadSize = ftell(aFileID) - fStartPos;

            if(fSize ~= fReadSize)
                error('Unexpected BlockVectorMetadata length');
            end

            obj = ContinuousBlockVectorHeaderEntry( ...
                aEntryRecord, ...
                aFileID, ...
                aCombinedBlockVector.VersionMajor, ...
                aCombinedBlockVector.VersionMinor, ...
                aCombinedBlockVector.DataType, ...
                aCombinedBlockVector.SampleType, ...
                aCombinedBlockVector.SamplingFrequency, ...
                aCombinedBlockVector.VoltageScale, ...
                aCombinedBlockVector.NumChannelsPerBlock, ...
                aCombinedBlockVector.NumDataSetsPerBlock, ...
                aCombinedBlockVector.NumSamplesPerBlock, ...
                aCombinedBlockVector.VectorHeaderSize, ...
                aCombinedBlockVector.BlockHeaderSize, ...
                aCombinedBlockVector.BlockVectorStartTime, ...
                aCombinedBlockVector.ExperimentStartTime, ...
                aCombinedBlockVector.AddedDate, ...
                aCombinedBlockVector.ModifiedDate, ...
                aCombinedBlockVector.Duration, ...
                aCombinedBlockVector.Name, ...
                aCombinedBlockVector.Description, ...
                aCombinedBlockVector.DataRegionStart, ...
                aCombinedBlockVector.DataRegionLength, ...
                aCombinedBlockVector.CombinedBlockVectorHeaderEntrySize, ...
                fChannelIDs, ...
                fDataSetNames, ...
                fSize);
        end
    end
end

