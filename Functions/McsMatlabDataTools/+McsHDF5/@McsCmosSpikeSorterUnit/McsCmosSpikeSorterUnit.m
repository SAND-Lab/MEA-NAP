classdef McsCmosSpikeSorterUnit < handle
% Holds the contents of a Unit group in a SpikeSorter data source.
%
% The contents of the Peaks, RoiSTAs and Source fields are retrieved from
% the file only when these fields are accessed.
%
% Important fields:
%   Peaks       -   (struct) Contains timestamps and peak amplitudes for
%                   each peak stored for the unit. The flag IncludePeak
%                   denotes, whether this peak was classified as a spike.
%                   If cutouts have been saved as well, they will be in the
%                   field Cutouts
%   RoiSTAs     -   (channels x samples) Matrix that holds an STA for each
%                   channel in the ROI of the unit. The unit and the channel 
%                   ID of the STAs are stored in the RoiSTAsInfo field
%   Source      -   (samples x 1) Vector that holds the source signal trace
%                   of the unit.
%   UnitInfo    -   (struct) Metadata info about the Unit, such as its
%                   location and the extracted quality measures.
%   Unmixing    -   (channels x embedding) Matrix that holds the projection
%                   coefficients from the raw data channels to the Source 
%                   signal. The sequence of channel IDs is stored in the
%                   UnmixingInfo field
%   Info        -   (struct) Attributes of the Unit
%   *Info       -   (struct) Attributes of the Peaks/RoiSTAs/Source/Unmixing
%                   datasets
%
% (c) 2017 by Multi Channel Systems MCS GmbH
    properties (SetAccess = private)
        Peaks       % (struct) For each peak, contains timestamp, amplitude and cutout
        PeaksInfo   % (struct) Metadata for the Peaks field
        RoiSTAs     % (channels x samples) STAs for each channel in the ROI
        RoiSTAsInfo % (struct) Metadata for the RoiSTAs field
        Source      % (samples x 1) Source signal trace vector
        SourceInfo  % (struct) Metadata for the Source field
        UnitInfo    % (struct) Information about the unit, such as Location, Quality, etc.
        Unmixing    % (channels x embedding) Projection matrix from raw data to the source signal
        UnmixingInfo % (struct) Metadata for the Unmixing field
        Info    % Metadata for the Unit
    end
    
    properties (Access = private)
        StructInfo
        FileName
        PeaksLoaded = false;
        StasLoaded = false;
        SourceLoaded = false;
        Internal = false;
    end
    
    methods
        function str = McsCmosSpikeSorterUnit(filename, strStruct, varargin)
        % Constructs a McsCmosSpikeSorterUnit object.
        %
        % function str = McsCmosSpikeSorterUnit(filename, strStruct, varargin)
        %
        % This will read all of the meta data in the Unit group. The Peaks,
        % RoiSTAs and Source datasets will not be read directly. Instead,
        % they will be read when the respective fields are accessed for the
        % first time.
        %
        % Input:
        %   filename        -   (string) Name of the HDF5 file
        %   strStruct       -   (struct) The HDF5 tree structure for the
        %                       Unit group generated by the h5info command
        
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            str.Info = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct, mode);
            str.PeaksInfo = McsHDF5.McsCmosSpikeSorterUnit.ReadPeaksInfo(strStruct, mode);
            str.RoiSTAsInfo = McsHDF5.McsCmosSpikeSorterUnit.ReadRoiSTAsInfo(strStruct, mode);
            str.SourceInfo = McsHDF5.McsCmosSpikeSorterUnit.ReadSourceInfo(strStruct, mode);
            [str.Unmixing, str.UnmixingInfo] = McsHDF5.McsCmosSpikeSorterUnit.ReadUnmixingInfo(filename, strStruct, mode);
            str.UnitInfo = McsHDF5.McsCmosSpikeSorterUnit.ReadUnitInfo(filename, strStruct, mode);
            
            str.StructInfo = strStruct;
            str.FileName = filename;
        end
        
        function s = disp(str)
            s = 'McsCmosSpikeStream object\n\n';
            s = [s 'Properties:\n'];
            s = [s '\tPeaks Loaded:\t\t\t '];
            if str.PeaksLoaded
                s = [s 'true\n'];
            else
                s = [s 'false\n'];
            end
            s = [s '\tSTAs Loaded:\t\t\t '];
            if str.StasLoaded
                s = [s 'true\n'];
            else
                s = [s 'false\n'];
            end
            s = [s '\tSource Loaded:\t\t\t '];
            if str.SourceLoaded
                s = [s 'true\n'];
            else
                s = [s 'false\n'];
            end
            s = [s '\n'];
            
            s = [s 'Available Fields:\n'];
            s = [s '\tPeaks:\t\t\t\t\t '];
            if str.PeaksLoaded
                s = [s 'TimeStamp: {' num2str(size(str.Peaks.Timestamp,1)) 'x' num2str(size(str.Peaks.Timestamp,2)) ' ' class(str.Peaks.Timestamp) '}'];
                s = [s ', PeakAmplitude: {' num2str(size(str.Peaks.PeakAmplitude,1)) 'x' num2str(size(str.Peaks.PeakAmplitude,2)) ' ' class(str.Peaks.PeakAmplitude) '}'];
                s = [s ', IncludePeak: {' num2str(size(str.Peaks.IncludePeak,1)) 'x' num2str(size(str.Peaks.IncludePeak,2)) ' ' class(str.Peaks.IncludePeak) '}'];
                if isfield(str.Peaks, 'Cutout')
                    s = [s ', Cutout: {' num2str(size(str.Peaks.Cutout,1)) 'x' num2str(size(str.Peaks.Cutout,2)) ' ' class(str.Peaks.Cutout) '}'];
                end
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tPeaksInfo:\t\t\t\t [1x1 struct]'];
            s = [s '\n'];
            s = [s '\tRoiSTAs:\t\t\t\t '];
            if str.StasLoaded
                s = [s '[' num2str(size(str.RoiSTAs,1)) 'x' num2str(size(str.RoiSTAs,2)) ' ' class(str.RoiSTAs) ']'];
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tRoiSTAsInfo:\t\t\t [1x1 struct]'];
            s = [s '\n'];
            s = [s '\tSource:\t\t\t\t\t '];
            if str.SourceLoaded
                s = [s '[' num2str(size(str.Source,1)) 'x' num2str(size(str.Source,2)) ' ' class(str.Source) ']'];
            else
                s = [s 'not loaded'];
            end
            s = [s '\n'];
            s = [s '\tSourceInfo:\t\t\t\t [1x1 struct]'];
            s = [s '\n'];
            s = [s '\tUnitInfo:\t\t\t\t {' num2str(size(str.UnitInfo, 1)) 'x' num2str(size(str.UnitInfo, 2)) ' struct}'];
            s = [s '\n'];
            s = [s '\tUnmixing:\t\t\t\t [' num2str(size(str.Unmixing, 1)) 'x' num2str(size(str.Unmixing, 2)) ' ' class(str.Unmixing) ']'];
            s = [s '\n'];
            s = [s '\tUnmixingInfo:\t\t\t [1x1 struct]'];
            s = [s '\n'];
            s = [s '\tInfo:\t\t\t\t\t [1x1 struct]'];
            s = [s '\n'];
            s = [s '\n'];
            fprintf(s);
        end
        
        function peaks = get.Peaks(str)
        % Accessor function for the Peaks field.
        %
        % function data = get.Peaks(str)
        %
        % Will read the peaks data from file the first time this field is
        % accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if ~str.Internal && ~str.PeaksLoaded
                str.Internal = true;
                fprintf('Reading Unit peaks...')
                spikeData = McsHDF5.McsH5Helper.ReadCompoundDataset(str.FileName, [str.StructInfo.Name '/Peaks'], mode);
                fn = fieldnames(spikeData);
                numCutout = sum(cellfun(@(x)(~isempty(regexp(x, 'x\d+', 'once'))), fn));
                cutouts = zeros(numCutout, length(spikeData.Timestamp));
                for ni = 1:numCutout
                    cutouts(ni,:) = spikeData.(['x' num2str(ni)]);
                end
                str.Peaks.Timestamp = spikeData.Timestamp;
                str.Peaks.PeakAmplitude = spikeData.PeakAmplitude;
                str.Peaks.IncludePeak = spikeData.IncludePeak;
                if numCutout > 0
                    str.Peaks.Cutout = cutouts';
                end
                fprintf('done!\n');
                str.PeaksLoaded = true;
                str.Internal = false;
            end
            peaks = str.Peaks;
        end
        
        function stas = get.RoiSTAs(str)
        % Accessor function for the RoiSTAs field.
        %
        % function data = get.RoiSTAs(str)
        %
        % Will read the roi STA data from file the first time this field is
        % accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if ~str.Internal && ~str.StasLoaded
                str.Internal = true;
                fprintf('Reading Unit Roi STAs...')
                if strcmp(mode, 'h5')
                    str.RoiSTAs = h5read(str.FileName, [str.StructInfo.Name '/RoiSTAs']);
                else
                    str.RoiSTAs = hdf5read(str.FileName, [str.StructInfo.Name '/RoiSTAs']);
                end
                fprintf('done!\n');
                str.StasLoaded = true;
                str.Internal = false;
            end
            stas = str.RoiSTAs;
        end
        
        function src = get.Source(str)
        % Accessor function for the Source field.
        %
        % function data = get.Source(str)
        %
        % Will read the source data from file the first time this field is
        % accessed.
            if exist('h5info')
                mode = 'h5';
            else
                mode = 'hdf5';
            end
            
            if ~str.Internal && ~str.SourceLoaded
                str.Internal = true;
                fprintf('Reading Unit Source...')
                if strcmp(mode, 'h5')
                    str.Source = h5read(str.FileName, [str.StructInfo.Name '/Source']);
                else
                    str.Source = hdf5read(str.FileName, [str.StructInfo.Name '/Source']);
                end
                fprintf('done!\n');
                str.SourceLoaded = true;
                str.Internal = false;
            end
            src = str.Source;
        end
    end
    
    methods (Static, Access = private)
        function peakInfos = ReadPeaksInfo(strStruct, mode)
            peaksType = '147721c1-1ca8-4a16-b697-08fbefddc180';
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                if strcmpi(type, peaksType)
                    peakInfos = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct.Datasets(di), mode);
                    return;
                end
            end
        end
        
        function staInfos = ReadRoiSTAsInfo(strStruct, mode)
            staType = '58c6e2a7-281c-4ace-884c-69f706bbc75e';
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                if strcmpi(type, staType)
                    staInfos = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct.Datasets(di), mode);
                    return;
                end
            end
        end
        
        function sourceInfos = ReadSourceInfo(strStruct, mode)
            sourceType = '4b383ee7-f561-4dbd-abc9-1c0bf831c02c';
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                if strcmpi(type, sourceType)
                    sourceInfos = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct.Datasets(di), mode);
                    return;
                end
            end
        end
        
        function [unmix, unmixInfos] = ReadUnmixingInfo(filename, strStruct, mode)
            unmixType = '1dc2e95d-f66e-4a95-b3f9-a40da9533601';
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                if strcmpi(type, unmixType)
                    unmixInfos = McsHDF5.McsH5Helper.ReadInfoFromAttributes(strStruct.Datasets(di), mode);
                    if strcmp(mode, 'h5')
                        unmix = h5read(filename, [strStruct.Name '/' strStruct.Datasets(di).Name]);
                    else
                        unmix = hdf5read(filename, [strStruct.Name '/' strStruct.Datasets(di).Name]);
                    end
                    unmix = unmix';
                    return;
                end
            end
        end
        
        function unitInfo = ReadUnitInfo(filename, strStruct, mode)
            unitInfoType = 'ae5e3dbc-cca6-4565-8647-e681821a1801';
            for di = 1:length(strStruct.Datasets)
                type = McsHDF5.McsH5Helper.GetFromAttributes(strStruct.Datasets(di), 'ID.TypeID', mode);
                if strcmpi(type, unitInfoType)
                    inf = McsHDF5.McsH5Helper.ReadCompoundDataset(filename, [strStruct.Name '/' strStruct.Datasets(di).Name], mode);
                
                    fn = fieldnames(inf);
                    for fni = 1:length(fn)
                        fname = strrep(fn{fni}, '0x2E', '');
                        unitInfo.(fname) = inf.(fn{fni});
                        if verLessThan('matlab','7.11') && strcmp(class(inf.(fn{fni})),'int64')
                            unitInfo.(fname) = double(unitInfos.(fname));
                        end
                    end
                end
            end
        end
    end
    
    methods (Static)
        STAImage = createUnitSTAImage(str)
    end
end